openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UsersController_findAll
      parameters: []
      responses:
        '200':
          description: Return all users.
      summary: Get all users
      tags:
        - user
    post:
      operationId: UsersController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User successfully created.
        '400':
          description: Missing required fields.
      summary: Create new user
      tags:
        - user
  /user/{id}:
    get:
      operationId: UsersController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Return user by id.
        '400':
          description: Invalid UUID.
        '404':
          description: User not found.
      summary: Get user by id
      tags:
        - user
    put:
      operationId: UsersController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password successfully updated.
        '400':
          description: Invalid UUID.
        '404':
          description: User not found.
      summary: Update user password
      tags:
        - user
    delete:
      operationId: UsersController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: User successfully deleted.
        '400':
          description: Invalid UUID.
        '404':
          description: User not found.
      summary: Delete user
      tags:
        - user
  /track:
    get:
      operationId: TracksController_findAll
      parameters: []
      responses:
        '200':
          description: Return all tracks.
      summary: Get all tracks
      tags:
        - track
    post:
      operationId: TracksController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Track successfully created.
        '400':
          description: Missing required fields.
      summary: Create new track
      tags:
        - track
  /track/{id}:
    get:
      operationId: TracksController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Return track by id.
        '400':
          description: Invalid UUID.
        '404':
          description: Track not found.
      summary: Get track by id
      tags:
        - track
    put:
      operationId: TracksController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: Track successfully updated.
        '400':
          description: Invalid UUID.
        '404':
          description: Track not found.
      summary: Update track
      tags:
        - track
    delete:
      operationId: TracksController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Track successfully deleted.
        '400':
          description: Invalid UUID.
        '404':
          description: Track not found.
      summary: Delete track
      tags:
        - track
  /artist:
    get:
      operationId: ArtistsController_findAll
      parameters: []
      responses:
        '200':
          description: Return all artists.
      summary: Get all artists
      tags:
        - artist
    post:
      operationId: ArtistsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Artist successfully created.
        '400':
          description: Missing required fields.
      summary: Create new artist
      tags:
        - artist
  /artist/{id}:
    get:
      operationId: ArtistsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Return artist by id.
        '400':
          description: Invalid UUID.
        '404':
          description: Artist not found.
      summary: Get artist by id
      tags:
        - artist
    put:
      operationId: ArtistsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: Artist successfully updated.
        '400':
          description: Invalid UUID or missing fields.
        '404':
          description: Artist not found.
      summary: Update artist
      tags:
        - artist
    delete:
      operationId: ArtistsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Artist successfully deleted.
        '400':
          description: Invalid UUID.
        '404':
          description: Artist not found.
      summary: Delete artist
      tags:
        - artist
  /album:
    get:
      operationId: AlbumsController_findAll
      parameters: []
      responses:
        '200':
          description: Return all albums.
      summary: Get all albums
      tags:
        - album
    post:
      operationId: AlbumsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Album successfully created.
        '400':
          description: Missing required fields.
      summary: Create new album
      tags:
        - album
  /album/{id}:
    get:
      operationId: AlbumsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Return album by id.
        '400':
          description: Invalid UUID.
        '404':
          description: Album not found.
      summary: Get album by id
      tags:
        - album
    put:
      operationId: AlbumsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: Album successfully updated.
        '400':
          description: Invalid UUID.
        '404':
          description: Album not found.
      summary: Update album
      tags:
        - album
    delete:
      operationId: AlbumsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Album successfully deleted.
        '400':
          description: Invalid UUID.
        '404':
          description: Album not found.
      summary: Delete album
      tags:
        - album
  /favs:
    get:
      operationId: FavoritesController_getAllFavorites
      parameters: []
      responses:
        '200':
          description: Return all favorites.
      summary: Get all favorites
      tags:
        - favorites
  /favs/track/{id}:
    post:
      operationId: FavoritesController_addTrackToFavorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Track added to favorites.
        '404':
          description: Track not found.
      summary: Add track to favorites
      tags:
        - favorites
    delete:
      operationId: FavoritesController_removeTrackFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Track removed from favorites.
        '404':
          description: Track not found in favorites.
      summary: Remove track from favorites
      tags:
        - favorites
  /favs/album/{id}:
    post:
      operationId: FavoritesController_addAlbumToFavorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Album added to favorites.
        '404':
          description: Album not found.
      summary: Add album to favorites
      tags:
        - favorites
    delete:
      operationId: FavoritesController_removeAlbumFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Album removed from favorites.
        '404':
          description: Album not found in favorites.
      summary: Remove album from favorites
      tags:
        - favorites
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_addArtistToFavorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Artist added to favorites.
        '404':
          description: Artist not found.
      summary: Add artist to favorites
      tags:
        - favorites
    delete:
      operationId: FavoritesController_removeArtistFromFavorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Artist removed from favorites.
        '404':
          description: Artist not found in favorites.
      summary: Remove artist from favorites
      tags:
        - favorites
info:
  title: Home Liblary API
  description: ''
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: User login
          example: john_doe
        password:
          type: string
          description: User password
          example: password123
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: Current password
          example: oldpass123
        newPassword:
          type: string
          description: New password
          example: newpass123
      required:
        - oldPassword
        - newPassword
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: Track name
          example: My Song
        artistId:
          type: string
          description: Artist ID
          example: uuid-string
        albumId:
          type: string
          description: Album ID
          example: uuid-string
        duration:
          type: number
          description: Track duration in seconds
          example: 180
      required:
        - name
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: Track name
          example: Updated Song Name
        artistId:
          type: string
          description: Artist ID
          example: uuid-string
        albumId:
          type: string
          description: Album ID
          example: uuid-string
        duration:
          type: number
          description: Track duration in seconds
          example: 200
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: Artist name
          example: John Doe
        grammy:
          type: boolean
          description: Grammy award winner
          example: true
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: Artist name
          example: Updated Name
        grammy:
          type: boolean
          description: Grammy award winner
          example: false
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: Album name
          example: Greatest Hits
        year:
          type: number
          description: Release year
          example: 2023
        artistId:
          type: string
          description: Artist ID
          example: uuid-string
      required:
        - name
        - year
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: Album name
          example: Updated Album Name
        year:
          type: number
          description: Release year
          example: 2024
        artistId:
          type: string
          description: Artist ID
          example: uuid-string